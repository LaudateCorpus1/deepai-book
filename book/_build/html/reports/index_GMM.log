Traceback (most recent call last):
  File "/home/dell/.local/lib/python3.6/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/dell/miniconda3/envs/deepai-book/lib/python3.6/asyncio/base_events.py", line 488, in run_until_complete
    return future.result()
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal
 
plt.style.use('seaborn-dark')
plt.rcParams['figure.figsize']=8,8
fig = plt.figure()

# Khá»Ÿi táº¡o mean vÃ  covariance matrix
random_seed=1000
mean = np.array([0,0])
cov = np.array([[1, 0], [0, 1]])

# Khá»Ÿi táº¡o multivariate gaussian distribution theo mean vÃ  covariance matrix
distr = multivariate_normal(cov = cov, mean = mean,
                            seed = random_seed)
  
# Táº¡o meshgrid complacent vá»›i 3-sigma boundary
mean_1, mean_2 = mean[0], mean[1]
sigma_1, sigma_2 = cov[0,0], cov[1,1]
  
x = np.linspace(-3*sigma_1, 3*sigma_1, num=100)
y = np.linspace(-3*sigma_2, 3*sigma_2, num=100)
X, Y = np.meshgrid(x,y)
  
# Khá»Ÿi táº¡o density function cho má»—i Ä‘iá»ƒm trong meshgrid
pdf = np.zeros(X.shape)
for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        pdf[i,j] = distr.pdf([X[i,j], Y[i,j]])
  
# Váº½ biá»ƒu Ä‘á»“
ax = fig.add_subplot(111, projection = '3d')
ax.plot_surface(X, Y, pdf, cmap = 'viridis')

plt.xlabel("x1")
plt.ylabel("x2")
plt.title('Bivariate Gaussian Distribution with Covariance between x1 and x2 = 1')
pdf_list.append(pdf)
ax.axes.zaxis.set_ticks([])
 
plt.tight_layout()
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-1-e5521c5e34e5>[0m in [0;36m<module>[0;34m[0m
[1;32m     37[0m [0mplt[0m[0;34m.[0m[0mylabel[0m[0;34m([0m[0;34m"x2"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     38[0m [0mplt[0m[0;34m.[0m[0mtitle[0m[0;34m([0m[0;34m'Bivariate Gaussian Distribution with Covariance between x1 and x2 = 1'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 39[0;31m [0mpdf_list[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0mpdf[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     40[0m [0max[0m[0;34m.[0m[0maxes[0m[0;34m.[0m[0mzaxis[0m[0;34m.[0m[0mset_ticks[0m[0;34m([0m[0;34m[[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     41[0m [0;34m[0m[0m

[0;31mNameError[0m: name 'pdf_list' is not defined
NameError: name 'pdf_list' is not defined

