Traceback (most recent call last):
  File "/home/dell/.local/lib/python3.6/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 1087, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/home/dell/miniconda3/envs/deepai-book/lib/python3.6/asyncio/base_events.py", line 488, in run_until_complete
    return future.result()
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 541, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 832, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/home/dell/.local/lib/python3.6/site-packages/nbclient/client.py", line 740, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply['content'])
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.linear_model import Ridge

rid_regr = Ridge(alpha = 0.3, normalize = True)
rid_regr.fit(X, y)

y_pred_rid = rid_regr.predict(X)

_plot_act_pred(x1, y, y_pred_rid, 
      title='Gi√° nh√† theo kho·∫£ng c√°ch t·ªõi TT',  
      xlabel='Kho·∫£ng c√°ch t·ªõi TT', 
      ylabel='Gi√° nh√† (t·ª∑ VND)')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-13-504b053ee125>[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0mrid_regr[0m [0;34m=[0m [0mRidge[0m[0;34m([0m[0malpha[0m [0;34m=[0m [0;36m0.3[0m[0;34m,[0m [0mnormalize[0m [0;34m=[0m [0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0mrid_regr[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m [0my_pred_rid[0m [0;34m=[0m [0mrid_regr[0m[0;34m.[0m[0mpredict[0m[0;34m([0m[0mX[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/deepai-book/lib/python3.6/site-packages/sklearn/linear_model/_ridge.py[0m in [0;36mfit[0;34m(self, X, y, sample_weight)[0m
[1;32m    760[0m         [0mself[0m [0;34m:[0m [0mreturns[0m [0man[0m [0minstance[0m [0mof[0m [0mself[0m[0;34m.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    761[0m         """
[0;32m--> 762[0;31m         [0;32mreturn[0m [0msuper[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mfit[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0msample_weight[0m[0;34m=[0m[0msample_weight[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    763[0m [0;34m[0m[0m
[1;32m    764[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/deepai-book/lib/python3.6/site-packages/sklearn/linear_model/_ridge.py[0m in [0;36mfit[0;34m(self, X, y, sample_weight)[0m
[1;32m    543[0m                                    [0maccept_sparse[0m[0;34m=[0m[0m_accept_sparse[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    544[0m                                    [0mdtype[0m[0;34m=[0m[0m_dtype[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 545[0;31m                                    multi_output=True, y_numeric=True)
[0m[1;32m    546[0m         [0;32mif[0m [0msparse[0m[0;34m.[0m[0missparse[0m[0;34m([0m[0mX[0m[0;34m)[0m [0;32mand[0m [0mself[0m[0;34m.[0m[0mfit_intercept[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    547[0m             [0;32mif[0m [0mself[0m[0;34m.[0m[0msolver[0m [0;32mnot[0m [0;32min[0m [0;34m[[0m[0;34m'auto'[0m[0;34m,[0m [0;34m'sparse_cg'[0m[0;34m,[0m [0;34m'sag'[0m[0;34m][0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/deepai-book/lib/python3.6/site-packages/sklearn/base.py[0m in [0;36m_validate_data[0;34m(self, X, y, reset, validate_separately, **check_params)[0m
[1;32m    431[0m                 [0my[0m [0;34m=[0m [0mcheck_array[0m[0;34m([0m[0my[0m[0;34m,[0m [0;34m**[0m[0mcheck_y_params[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    432[0m             [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 433[0;31m                 [0mX[0m[0;34m,[0m [0my[0m [0;34m=[0m [0mcheck_X_y[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0;34m**[0m[0mcheck_params[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    434[0m             [0mout[0m [0;34m=[0m [0mX[0m[0;34m,[0m [0my[0m[0;34m[0m[0;34m[0m[0m
[1;32m    435[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/deepai-book/lib/python3.6/site-packages/sklearn/utils/validation.py[0m in [0;36minner_f[0;34m(*args, **kwargs)[0m
[1;32m     61[0m             [0mextra_args[0m [0;34m=[0m [0mlen[0m[0;34m([0m[0margs[0m[0;34m)[0m [0;34m-[0m [0mlen[0m[0;34m([0m[0mall_args[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     62[0m             [0;32mif[0m [0mextra_args[0m [0;34m<=[0m [0;36m0[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 63[0;31m                 [0;32mreturn[0m [0mf[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     64[0m [0;34m[0m[0m
[1;32m     65[0m             [0;31m# extra_args > 0[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/deepai-book/lib/python3.6/site-packages/sklearn/utils/validation.py[0m in [0;36mcheck_X_y[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[1;32m    829[0m         [0my[0m [0;34m=[0m [0my[0m[0;34m.[0m[0mastype[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mfloat64[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    830[0m [0;34m[0m[0m
[0;32m--> 831[0;31m     [0mcheck_consistent_length[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    832[0m [0;34m[0m[0m
[1;32m    833[0m     [0;32mreturn[0m [0mX[0m[0;34m,[0m [0my[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/deepai-book/lib/python3.6/site-packages/sklearn/utils/validation.py[0m in [0;36mcheck_consistent_length[0;34m(*arrays)[0m
[1;32m    261[0m     [0;32mif[0m [0mlen[0m[0;34m([0m[0muniques[0m[0;34m)[0m [0;34m>[0m [0;36m1[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    262[0m         raise ValueError("Found input variables with inconsistent numbers of"
[0;32m--> 263[0;31m                          " samples: %r" % [int(l) for l in lengths])
[0m[1;32m    264[0m [0;34m[0m[0m
[1;32m    265[0m [0;34m[0m[0m

[0;31mValueError[0m: Found input variables with inconsistent numbers of samples: [21, 13]
ValueError: Found input variables with inconsistent numbers of samples: [21, 13]

